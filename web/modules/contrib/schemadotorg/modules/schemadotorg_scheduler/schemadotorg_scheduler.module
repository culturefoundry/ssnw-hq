<?php

/**
 * @file
 * Automatically enables scheduling Schema.org types.
 */

declare(strict_types=1);

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\schemadotorg\SchemaDotOrgMappingInterface;

/**
 * Implements hook_schemadotorg_mapping_insert().
 */
function schemadotorg_scheduler_schemadotorg_mapping_insert(SchemaDotOrgMappingInterface $mapping): void {
  /** @var \Drupal\schemadotorg_scheduler\SchemaDotOrgSchedulerManagerInterface $schema_scheduler_manager */
  $schema_scheduler_manager = \Drupal::service('schemadotorg_scheduler.manager');
  $schema_scheduler_manager->mappingInsert($mapping);
}

/* ************************************************************************** */
// Schema.org JSON-LD.
/* ************************************************************************** */

/**
 * Implements hook_schemadotorg_jsonld_schema_type_entity_load().
 */
function schemadotorg_scheduler_schemadotorg_jsonld_schema_type_entity_load(array &$data, EntityInterface $entity, ?SchemaDotOrgMappingInterface $mapping, BubbleableMetadata $bubbleable_metadata): void {
  // Make sure this is a content entity with a mapping.
  if (!$entity instanceof ContentEntityInterface
    || !$mapping) {
    return;
  }

  /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
  $date_formatter = \Drupal::service('date.formatter');

  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');

  $schema_type = $mapping->getSchemaType();
  $properties = [
    'datePublished' => 'publish_on',
    'expires' => 'unpublish_on',
  ];
  foreach ($properties as $property => $field) {
    if (empty($data[$property])
      && $schema_type_manager->hasProperty($schema_type, $property)
      && $entity->hasField($field)
      && $entity->get($field)->value) {
      $data[$property] = $date_formatter->format($entity->get($field)->value, 'custom', 'Y-m-d H:i:s P');
    }
  }
}

/* ************************************************************************** */
// Schema.org types settings form.
/* ************************************************************************** */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see \Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase::afterBuildDetails
 * @see \Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase::formAlter
 */
function schemadotorg_scheduler_form_schemadotorg_types_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  $form['schemadotorg_scheduler'] = [
    '#type' => 'details',
    '#title' => t('Scheduler settings'),
  ];
  $form['schemadotorg_scheduler']['scheduled_types'] = [
    '#type' => 'schemadotorg_settings',
    '#title' => t('Scheduled Schema.org types'),
    '#description' => t('Enter the Schema.org types that support scheduling and whether the Schema.org types should support publish, unpublish or both.')
    . ' '
    . t('Scheduled Schema.org type settings will be applied to all subtypes.'),
    '#example' => '
SchemeType:
  - publish
  - unpublish
SchemaType:
  - publish
',
  ];
}
