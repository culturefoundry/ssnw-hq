<?php

/**
 * @file
 * Integrates the Paragraphs with the Schema.org Blueprints module.
 */

declare(strict_types=1);

use Drupal\Core\Field\FieldConfigInterface;
use Drupal\Core\Field\FieldItemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\paragraphs\ParagraphsTypeInterface;
use Drupal\schemadotorg\SchemaDotOrgMappingInterface;

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function schemadotorg_paragraphs_schemadotorg_mapping_presave(SchemaDotOrgMappingInterface $mapping): void {
  if ($mapping->isSyncing()) {
    return;
  }

  /** @var \Drupal\schemadotorg_paragraphs\SchemaDotOrgParagraphsManagerInterface $schema_paragraphs_manager */
  $schema_paragraphs_manager = \Drupal::service('schemadotorg_paragraphs.manager');
  $schema_paragraphs_manager->mappingPresave($mapping);
}

/**
 * Implements hook_schemadotorg_property_field_alter().
 */
function schemadotorg_paragraphs_schemadotorg_property_field_alter(
  string $schema_type,
  string $schema_property,
  array &$field_storage_values,
  array &$field_values,
  ?string &$widget_id,
  array &$widget_settings,
  ?string &$formatter_id,
  array &$formatter_settings,
): void {
  /** @var \Drupal\schemadotorg_paragraphs\SchemaDotOrgParagraphsManagerInterface $schema_paragraphs_manager */
  $schema_paragraphs_manager = \Drupal::service('schemadotorg_paragraphs.manager');
  $schema_paragraphs_manager->propertyFieldAlter(
    $schema_type,
    $schema_property,
    $field_storage_values,
    $field_values,
    $widget_id,
    $widget_settings,
    $formatter_id,
    $formatter_settings
  );
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function schemadotorg_paragraphs_field_config_presave(FieldConfigInterface $field_config): void {
  /** @var \Drupal\schemadotorg_paragraphs\SchemaDotOrgParagraphsManagerInterface $schema_paragraphs_manager */
  $schema_paragraphs_manager = \Drupal::service('schemadotorg_paragraphs.manager');
  $schema_paragraphs_manager->fieldConfigPresave($field_config);
}

/**
 * Implements hook_field_widget_complete_form_alter().
 */
function schemadotorg_paragraphs_field_widget_complete_form_alter(array &$field_widget_complete_form, FormStateInterface $form_state, array $context): void {
  /** @var \Drupal\schemadotorg_paragraphs\SchemaDotOrgParagraphsManagerInterface $schema_paragraphs_manager */
  $schema_paragraphs_manager = \Drupal::service('schemadotorg_paragraphs.manager');
  $schema_paragraphs_manager->fieldWidgetCompleteFormAlter($field_widget_complete_form, $form_state, $context);
}

/* ************************************************************************** */
// Paragraph type icons.
/* ************************************************************************** */

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function schemadotorg_paragraphs_paragraphs_type_presave(ParagraphsTypeInterface $paragraphs_type): void {
  /** @var \Drupal\schemadotorg_paragraphs\SchemaDotOrgParagraphsManagerInterface $schema_paragraphs_manager */
  $schema_paragraphs_manager = \Drupal::service('schemadotorg_paragraphs.manager');
  $schema_paragraphs_manager->paragraphsTypePresave($paragraphs_type);
}

/* ************************************************************************** */
// Schema.org JSON-LD alterations.
/* ************************************************************************** */

/**
 * Implements hook_schemadotorg_jsonld_schema_property_alter().
 *
 * Adds paragraph from paragraphs library to JSON-LD.
 */
function schemadotorg_paragraphs_schemadotorg_jsonld_schema_property_alter(mixed &$value, FieldItemInterface $item, BubbleableMetadata $bubbleable_metadata): void {
  /** @var \Drupal\schemadotorg_paragraphs\SchemaDotOrgParagraphsJsonLdManager $schema_paragraphs_jsonld_manager */
  $schema_paragraphs_jsonld_manager = \Drupal::service('schemadotorg_paragraphs.jsonld_manager');
  $schema_paragraphs_jsonld_manager->jsonldSchemaPropertyAlter($value, $item, $bubbleable_metadata);
}

/* ************************************************************************** */
// Schema.org types settings form.
/* ************************************************************************** */

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @see \Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase::afterBuildDetails
 * @see \Drupal\schemadotorg\Form\SchemaDotOrgSettingsFormBase::formAlter
 */
function schemadotorg_paragraphs_form_schemadotorg_types_settings_form_alter(array &$form, FormStateInterface $form_state): void {
  $form['schemadotorg_paragraphs'] = [
    '#type' => 'details',
    '#title' => t('Paragraphs settings'),
  ];
  $form['schemadotorg_paragraphs']['paragraphs_library'] = [
    '#type' => 'schemadotorg_settings',
    '#title' => t('Schema.org types that default to using the Paragraphs library'),
    '#description' => t('Enter Schema.org types that should automatically support being used via the Paragraphs library.'),
    '#description_link' => 'types',
    '#access' => \Drupal::moduleHandler()->moduleExists('paragraphs_library'),
    '#example' => '
- SchemaType
- bundle
- SchemaType--bundle
',
  ];
}
