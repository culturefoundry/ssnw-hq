{"version":3,"file":"ssnw.js","sources":["../libraries/ssnw/js/jumpmenu.js","../libraries/ssnw/js/navigation.js","../libraries/ssnw/js/navigation-utils.js","../libraries/ssnw/js/second-level-navigation.js","../libraries/ssnw/ssnw.js"],"sourcesContent":["((Drupal, once) => {\n\n  function jumpTo(evt) {\n    const url = evt.target.value;\n    window.location.assign(url);\n  }\n\n  Drupal.behaviors.jumpmenu = {\n    attach(context) {\n      once(\n        'jumpmenu',\n        '[data-ssnw-jumpmenu=\"active\"]',\n        context\n      ).forEach((item) => {\n        item.onchange = jumpTo;\n      });\n    }\n  };\n})(Drupal, once);\n\n","/**\n * @file\n * Customization of navigation.\n */\n\n((Drupal, once, tabbable) => {\n  /**\n   * Checks if navWrapper contains \"is-active\" class.\n   *\n   * @param {Element} navWrapper\n   *   Header navigation.\n   *\n   * @return {boolean}\n   *   True if navWrapper contains \"is-active\" class, false if not.\n   */\n  function isNavOpen(navWrapper) {\n    return navWrapper.classList.contains('is-active');\n  }\n\n  /**\n   * Opens or closes the header navigation.\n   *\n   * @param {object} props\n   *   Navigation props.\n   * @param {boolean} state\n   *   State which to transition the header navigation menu into.\n   */\n  function toggleNav(props, state) {\n    const value = !!state;\n    props.navButton.setAttribute('aria-expanded', value);\n    props.body.classList.toggle('is-overlay-active', value);\n    props.body.classList.toggle('is-fixed', value);\n    props.navWrapper.classList.toggle('is-active', value);\n  }\n\n  /**\n   * Initialize the header navigation.\n   *\n   * @param {object} props\n   *   Navigation props.\n   */\n  function init(props) {\n    props.navButton.setAttribute('aria-controls', props.navWrapperId);\n    props.navButton.setAttribute('aria-expanded', 'false');\n\n    props.navButton.addEventListener('click', () => {\n      toggleNav(props, !isNavOpen(props.navWrapper));\n    });\n\n    // Close any open sub-navigation first, then close the header navigation.\n    document.addEventListener('keyup', (e) => {\n      if (e.key === 'Escape') {\n        if (props.olivero.areAnySubNavsOpen()) {\n          props.olivero.closeAllSubNav();\n        } else {\n          toggleNav(props, false);\n        }\n      }\n    });\n\n    props.overlay.addEventListener('click', () => {\n      toggleNav(props, false);\n    });\n\n    props.overlay.addEventListener('touchstart', () => {\n      toggleNav(props, false);\n    });\n\n    // Focus trap. This is added to the header element because the navButton\n    // element is not a child element of the navWrapper element, and the keydown\n    // event would not fire if focus is on the navButton element.\n    props.header.addEventListener('keydown', (e) => {\n      if (e.key === 'Tab' && isNavOpen(props.navWrapper)) {\n        const tabbableNavElements = tabbable.tabbable(props.navWrapper);\n        tabbableNavElements.unshift(props.navButton);\n        const firstTabbableEl = tabbableNavElements[0];\n        const lastTabbableEl =\n          tabbableNavElements[tabbableNavElements.length - 1];\n\n        if (e.shiftKey) {\n          if (\n            document.activeElement === firstTabbableEl &&\n            !props.olivero.isDesktopNav()\n          ) {\n            lastTabbableEl.focus();\n            e.preventDefault();\n          }\n        } else if (\n          document.activeElement === lastTabbableEl &&\n          !props.olivero.isDesktopNav()\n        ) {\n          firstTabbableEl.focus();\n          e.preventDefault();\n        }\n      }\n    });\n\n    // Remove overlays when browser is resized and desktop nav appears.\n    window.addEventListener('resize', () => {\n      if (props.olivero.isDesktopNav()) {\n        toggleNav(props, false);\n        props.body.classList.remove('is-overlay-active');\n        props.body.classList.remove('is-fixed');\n      }\n\n      // Ensure that all sub-navigation menus close when the browser is resized.\n      Drupal.olivero.closeAllSubNav();\n    });\n\n    // If hyperlink links to an anchor in the current page, close the\n    // mobile menu after the click.\n    props.navWrapper.addEventListener('click', (e) => {\n      if (\n        e.target.matches(\n          `[href*=\"${window.location.pathname}#\"], [href*=\"${window.location.pathname}#\"] *, [href^=\"#\"], [href^=\"#\"] *`,\n        )\n      ) {\n        toggleNav(props, false);\n      }\n    });\n  }\n\n  /**\n   * Initialize the navigation.\n   *\n   * @type {Drupal~behavior}\n   *\n   * @prop {Drupal~behaviorAttach} attach\n   *   Attach context and settings for navigation.\n   */\n  Drupal.behaviors.oliveroNavigation = {\n    attach(context) {\n      const headerId = 'header';\n      const header = once('navigation', `#${headerId}`, context).shift();\n      const navWrapperId = 'header-nav';\n\n      if (header) {\n        const navWrapper = header.querySelector(`#${navWrapperId}`);\n        const { olivero } = Drupal;\n        const navButton = context.querySelector(\n          '[data-drupal-selector=\"mobile-nav-button\"]',\n        );\n        const body = document.body;\n        const overlay = context.querySelector(\n          '[data-drupal-selector=\"header-nav-overlay\"]',\n        );\n\n        init({\n          olivero,\n          header,\n          navWrapperId,\n          navWrapper,\n          navButton,\n          body,\n          overlay,\n        });\n      }\n    },\n  };\n})(Drupal, once, tabbable);\n","/**\n * @file\n * Controls the visibility of desktop navigation.\n *\n * Shows and hides the desktop navigation based on scroll position and controls\n * the functionality of the button that shows/hides the navigation.\n */\n\n/* eslint-disable no-inner-declarations */\n((Drupal) => {\n  /**\n   * Olivero helper functions.\n   *\n   * @namespace\n   */\n  Drupal.olivero = {};\n\n  /**\n   * Checks if the mobile navigation button is visible.\n   *\n   * @return {boolean}\n   *   True if navButtons is hidden, false if not.\n   */\n  function isDesktopNav() {\n    const navButtons = document.querySelector(\n      '[data-drupal-selector=\"mobile-buttons\"]',\n    );\n    return navButtons\n      ? window.getComputedStyle(navButtons).getPropertyValue('display') ===\n          'none'\n      : false;\n  }\n\n  Drupal.olivero.isDesktopNav = isDesktopNav;\n/*\n  const stickyHeaderToggleButton = document.querySelector(\n    '[data-drupal-selector=\"sticky-header-toggle\"]',\n  );\n  const siteHeaderFixable = document.querySelector(\n    '[data-drupal-selector=\"site-header-fixable\"]',\n  );*/\n\n  /**\n   * Checks if the sticky header is enabled.\n   *\n   * @return {boolean}\n   *   True if sticky header is enabled, false if not.\n   *\n  function stickyHeaderIsEnabled() {\n    return stickyHeaderToggleButton.getAttribute('aria-checked') === 'true';\n  }\n\n  /**\n   * Save the current sticky header expanded state to localStorage, and set\n   * it to expire after two weeks.\n   *\n   * @param {boolean} expandedState\n   *   Current state of the sticky header button.\n   *\n  function setStickyHeaderStorage(expandedState) {\n    const now = new Date();\n\n    const item = {\n      value: expandedState,\n      expiry: now.getTime() + 20160000, // 2 weeks from now.\n    };\n    localStorage.setItem(\n      'Drupal.olivero.stickyHeaderState',\n      JSON.stringify(item),\n    );\n  }\n\n  /**\n   * Toggle the state of the sticky header between always pinned and\n   * only pinned when scrolled to the top of the viewport.\n   *\n   * @param {boolean} pinnedState\n   *   State to change the sticky header to.\n   *\n  function toggleStickyHeaderState(pinnedState) {\n    if (isDesktopNav() && siteHeaderFixable) {\n      siteHeaderFixable.classList.toggle('is-expanded', pinnedState);\n      stickyHeaderToggleButton.setAttribute('aria-checked', pinnedState);\n      setStickyHeaderStorage(pinnedState);\n    }\n  }\n\n  /**\n   * Return the sticky header's stored state from localStorage.\n   *\n   * @return {boolean}\n   *   Stored state of the sticky header.\n   *\n  function getStickyHeaderStorage() {\n    const stickyHeaderState = localStorage.getItem(\n      'Drupal.olivero.stickyHeaderState',\n    );\n\n    if (!stickyHeaderState) return false;\n\n    const item = JSON.parse(stickyHeaderState);\n    const now = new Date();\n\n    // Compare the expiry time of the item with the current time.\n    if (now.getTime() > item.expiry) {\n      // If the item is expired, delete the item from storage and return null.\n      localStorage.removeItem('Drupal.olivero.stickyHeaderState');\n      return false;\n    }\n    return item.value;\n  }*/\n\n  // Only enable scroll interactivity if the browser supports Intersection\n  // Observer.\n  // @see https://github.com/w3c/IntersectionObserver/blob/master/polyfill/intersection-observer.js#L19-L21\n  if (\n    'IntersectionObserver' in window &&\n    'IntersectionObserverEntry' in window &&\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype\n  ) {\n    const fixableElements = document.querySelectorAll(\n      '[data-drupal-selector=\"site-header-fixable\"], [data-drupal-selector=\"social-bar-inner\"]',\n    );\n\n    function toggleDesktopNavVisibility(entries) {\n      if (!isDesktopNav()) return;\n\n      entries.forEach((entry) => {\n        // Firefox doesn't seem to support entry.isIntersecting properly,\n        // so we check the intersectionRatio.\n        fixableElements.forEach((el) =>\n          el.classList.toggle('is-fixed', entry.intersectionRatio < 1),\n        );\n      });\n    }\n\n    /**\n     * Gets the root margin by checking for various toolbar classes.\n     *\n     * @return {string}\n     *   Root margin for the Intersection Observer options object.\n     */\n    function getRootMargin() {\n      let rootMarginTop = 72;\n      const { body } = document;\n\n      if (body.classList.contains('toolbar-fixed')) {\n        rootMarginTop -= 39;\n      }\n\n      if (\n        body.classList.contains('toolbar-horizontal') &&\n        body.classList.contains('toolbar-tray-open')\n      ) {\n        rootMarginTop -= 40;\n      }\n\n      return `${rootMarginTop}px 0px 0px 0px`;\n    }\n\n    /**\n     * Monitor the navigation position.\n     */\n    function monitorNavPosition() {\n      const primaryNav = document.querySelector(\n        '[data-drupal-selector=\"site-header\"]',\n      );\n      const options = {\n        rootMargin: getRootMargin(),\n        threshold: [0.999, 1],\n      };\n\n      const observer = new IntersectionObserver(\n        toggleDesktopNavVisibility,\n        options,\n      );\n\n      if (primaryNav) {\n        observer.observe(primaryNav);\n      }\n    }\n/*\n    if (stickyHeaderToggleButton) {\n      stickyHeaderToggleButton.addEventListener('click', () => {\n        toggleStickyHeaderState(!stickyHeaderIsEnabled());\n      });\n    }\n*/\n    // If header is pinned open and a header element gains focus, scroll to the\n    // top of the page to ensure that the header elements can be seen.\n   /* const siteHeaderInner = document.querySelector(\n      '[data-drupal-selector=\"site-header-inner\"]',\n    );\n    if (siteHeaderInner) {\n      siteHeaderInner.addEventListener('focusin', () => {\n        if (isDesktopNav() && !stickyHeaderIsEnabled()) {\n          const header = document.querySelector(\n            '[data-drupal-selector=\"site-header\"]',\n          );\n          const headerNav = header.querySelector(\n            '[data-drupal-selector=\"header-nav\"]',\n          );\n          const headerMargin = header.clientHeight - headerNav.clientHeight;\n          if (window.scrollY > headerMargin) {\n            window.scrollTo(0, headerMargin);\n          }\n        }\n      });\n    }*/\n\n    monitorNavPosition();\n    // setStickyHeaderStorage(getStickyHeaderStorage());\n    //toggleStickyHeaderState(getStickyHeaderStorage());\n  }\n})(Drupal);\n","/**\n * @file\n * Provides functionality for second level submenu navigation.\n */\n\n((Drupal) => {\n  const { isDesktopNav } = Drupal.olivero;\n  const secondLevelNavMenus = document.querySelectorAll(\n    '[data-drupal-selector=\"primary-nav-menu-item-has-children\"]',\n  );\n\n  /**\n   * Shows and hides the specified menu item's second level submenu.\n   *\n   * @param {Element} topLevelMenuItem\n   *   The <li> element that is the container for the menu and submenus.\n   * @param {boolean} [toState]\n   *   Optional state where we want the submenu to end up.\n   */\n  function toggleSubNav(topLevelMenuItem, toState) {\n    const buttonSelector =\n      '[data-drupal-selector=\"primary-nav-submenu-toggle-button\"]';\n    const button = topLevelMenuItem.querySelector(buttonSelector);\n    const state =\n      toState !== undefined\n        ? toState\n        : button.getAttribute('aria-expanded') !== 'true';\n\n    if (state) {\n      // If desktop nav, ensure all menus close before expanding new one.\n      if (isDesktopNav()) {\n        secondLevelNavMenus.forEach((el) => {\n          el.querySelector(buttonSelector).setAttribute(\n            'aria-expanded',\n            'false',\n          );\n          el.querySelector(\n            '[data-drupal-selector=\"primary-nav-menu--level-2\"]',\n          ).classList.remove('is-active-menu-parent');\n          el.querySelector(\n            '[data-drupal-selector=\"primary-nav-menu-🥕\"]',\n          ).classList.remove('is-active-menu-parent');\n        });\n      }\n    } else {\n      topLevelMenuItem.classList.remove('is-touch-event');\n    }\n\n    button.setAttribute('aria-expanded', state);\n    topLevelMenuItem\n      .querySelector('[data-drupal-selector=\"primary-nav-menu--level-2\"]')\n      .classList.toggle('is-active-menu-parent', state);\n    topLevelMenuItem\n      .querySelector('[data-drupal-selector=\"primary-nav-menu-🥕\"]')\n      .classList.toggle('is-active-menu-parent', state);\n  }\n\n  Drupal.olivero.toggleSubNav = toggleSubNav;\n\n  /**\n   * Sets a timeout and closes current desktop navigation submenu if it\n   * does not contain the focused element.\n   *\n   * @param {Event} e\n   *   The event object.\n   */\n  function handleBlur(e) {\n    if (!Drupal.olivero.isDesktopNav()) return;\n\n    setTimeout(() => {\n      const menuParentItem = e.target.closest(\n        '[data-drupal-selector=\"primary-nav-menu-item-has-children\"]',\n      );\n      if (!menuParentItem.contains(document.activeElement)) {\n        toggleSubNav(menuParentItem, false);\n      }\n    }, 200);\n  }\n\n  // Add event listeners onto each sub navigation parent and button.\n  secondLevelNavMenus.forEach((el) => {\n    const button = el.querySelector(\n      '[data-drupal-selector=\"primary-nav-submenu-toggle-button\"]',\n    );\n\n    button.removeAttribute('aria-hidden');\n    button.removeAttribute('tabindex');\n\n    // If touch event, prevent mouseover event from triggering the submenu.\n    el.addEventListener(\n      'touchstart',\n      () => {\n        el.classList.add('is-touch-event');\n      },\n      { passive: true },\n    );\n\n    el.addEventListener('mouseover', () => {\n      if (isDesktopNav() && !el.classList.contains('is-touch-event')) {\n        el.classList.add('is-active-mouseover-event');\n        toggleSubNav(el, true);\n\n        // Timeout is added to ensure that users of assistive devices (such as\n        // mouse grid tools) do not simultaneously trigger both the mouseover\n        // and click events. When these events are triggered together, the\n        // submenu to appear to not open.\n        setTimeout(() => {\n          el.classList.remove('is-active-mouseover-event');\n        }, 500);\n      }\n    });\n\n    button.addEventListener('click', () => {\n      if (!el.classList.contains('is-active-mouseover-event')) {\n        toggleSubNav(el);\n      }\n    });\n\n    el.addEventListener('mouseout', () => {\n      if (\n        isDesktopNav() &&\n        !document.activeElement.matches(\n          '[aria-expanded=\"true\"], .is-active-menu-parent *',\n        )\n      ) {\n        toggleSubNav(el, false);\n      }\n    });\n\n    el.addEventListener('blur', handleBlur, true);\n  });\n\n  /**\n   * Close all second level sub navigation menus.\n   */\n  function closeAllSubNav() {\n    secondLevelNavMenus.forEach((el) => {\n      // Return focus to the toggle button if the submenu contains focus.\n      if (el.contains(document.activeElement)) {\n        el.querySelector(\n          '[data-drupal-selector=\"primary-nav-submenu-toggle-button\"]',\n        ).focus();\n      }\n      toggleSubNav(el, false);\n    });\n  }\n\n  Drupal.olivero.closeAllSubNav = closeAllSubNav;\n\n  /**\n   * Checks if any sub navigation items are currently active.\n   *\n   * @return {boolean}\n   *   If sub navigation is currently open.\n   */\n  function areAnySubNavsOpen() {\n    let subNavsAreOpen = false;\n\n    secondLevelNavMenus.forEach((el) => {\n      const button = el.querySelector(\n        '[data-drupal-selector=\"primary-nav-submenu-toggle-button\"]',\n      );\n      const state = button.getAttribute('aria-expanded') === 'true';\n\n      if (state) {\n        subNavsAreOpen = true;\n      }\n    });\n\n    return subNavsAreOpen;\n  }\n\n  Drupal.olivero.areAnySubNavsOpen = areAnySubNavsOpen;\n\n  // Ensure that desktop submenus close when escape key is pressed.\n  document.addEventListener('keyup', (e) => {\n    if (e.key === 'Escape') {\n      if (isDesktopNav()) closeAllSubNav();\n    }\n  });\n\n  // If user taps outside of menu, close all menus.\n  document.addEventListener(\n    'touchstart',\n    (e) => {\n      if (\n        areAnySubNavsOpen() &&\n        !e.target.matches(\n          '[data-drupal-selector=\"header-nav\"], [data-drupal-selector=\"header-nav\"] *',\n        )\n      ) {\n        closeAllSubNav();\n      }\n    },\n    { passive: true },\n  );\n})(Drupal);\n","import \"./js/jumpmenu.js\";\nimport \"./js/navigation.js\";\nimport \"./js/navigation-utils.js\";\nimport \"./js/second-level-navigation.js\";\nimport \"./css/ssnw.css\";\n\nwindow.toggleDarkMode = function () {\n  const currentTheme = localStorage.getItem('theme');\n  if (document.documentElement.classList.contains('dark')) {\n    document.documentElement.classList.remove(['dark']);\n    localStorage.setItem('theme', 'light');\n  } else {\n    document.documentElement.classList.add(['dark']);\n    localStorage.setItem('theme', 'dark');\n  }\n};\nwindow.growText = function () {\n  let size = localStorage.size ?? 3;\n  if (size > 4) {\n    size = 5;\n  } else {\n    size++;\n  }\n  localStorage.setItem('size', size);\n  setSize();\n};\nwindow.shrinkText = function () {\n  let size = localStorage.size ?? 3;\n  if (size < 2) {\n    size = 1;\n  } else {\n    size--;\n  }\n  localStorage.setItem('size', size);\n  setSize();\n};\n"],"names":["Drupal","once","jumpTo","evt","url","context","item","tabbable","isNavOpen","navWrapper","toggleNav","props","state","value","init","tabbableNavElements","firstTabbableEl","lastTabbableEl","header","navWrapperId","olivero","navButton","body","overlay","isDesktopNav","navButtons","toggleDesktopNavVisibility","entries","entry","fixableElements","el","getRootMargin","rootMarginTop","monitorNavPosition","primaryNav","options","observer","secondLevelNavMenus","toggleSubNav","topLevelMenuItem","toState","buttonSelector","button","handleBlur","menuParentItem","closeAllSubNav","areAnySubNavsOpen","subNavsAreOpen","size"],"mappings":"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"}